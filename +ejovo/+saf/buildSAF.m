function [SAF, Y, norm] = buildSAF(degree, th, phi)
%BUILDSAF - Construct icosahedral Symmetry Adapted Functions 
%
%   [SAF, Y, norm] = ejovo.saf.buildSAF(degree, th, phi) 
%
%Inputs:
%   degree - degree of the SAF to build. Acceptable values are:
%           [0, 6, 10, 12, 15, 16, 18, 20, 22, 24, 26, 28, 30, 31]
%   th     - azimuth of coordinates where you wish to construct the SAF
%   phi    - elevation of coordinates where you wish to construct the SAF
%
%Outputs:
%   SAF    - the radial component of an SAF
%   Y      - the constituent spherical harmonics that make up an SAF,
%           stored as a 3 dimensional array
%   norm   - normalization factor for an SAF
%
%

L = [0, 6, 10, 12, 15, 16, 18, 20, 22, 24, 26, 28, 30, 31];
M = [0, 5, -5, 10, -10, 15, -15, 20, -20, 25, -25];
if degree == 31
   M = [0, 5, -5, 10, -10, 15, -15, 20, -20, 25, -25, 30, -30]; 
end

switch degree
    case 0
                primes = 1;
                sign = 1;
                norm = 1;  
    case 6                    
                primes = [11, 7, 7];
                sign = [1, -1, 1];
                norm = 1/5;                
    case 10                   
                primes = [13*19, 3*11*19, 3*11*19, 11*17 11*17];
                sign = [1, 1, -1, 1, 1];              
                norm = 1/(5^2*sqrt(3));                
    case 12
                primes = [9*7*17, 2*11*13, 2*11*13, 3*13*19, 3*13*19];
                sign = [1, -1, 1, 1, 1];
                norm = 1/(5^2*sqrt(5));
    case 15
                primes = [0, 9/125^2*667667/5, 9/125^2*667667/5, (33^2/625^2)*15834, (33^2/625^2)*15834, 3003^2/625^2, 3003^2/625^2];
                sign = [1, -1, -1, 1, -1, 1, 1];
                norm = 1;                
    case 16
                primes = [2^6*5*19*31, 3*5*13*17*31, 3*5*13*17*31, 2*7*17*23*31, 2*7*17*23*31, 9*17*23*29, 9*17*23*29];
                sign = [1, 1, -1, -1, -1, -1, 1];
                norm = 1/(2*5^3*sqrt(3*5));
    case 18
                primes = [5*11*17*23, 4*9*2*5*19, 4*9*2*5*19, 3*7*11*19, 3*7*11*19, 19*29*31, 19*29*31];
                sign = [1, -1, 1, 1, 1, -1, 1];
                norm = 1/(5^3*sqrt(5));
    case 20
                primes = [5*7*23*29, 2*11*17*19*29, 2*11*17*19*29, 41^2*17*19, 41^2*17*19, 4*2*11*19*31, 4*2*11*19*31, 11*13*31*37, 11*13*31*37];
                sign = [1, 1, -1, 1, 1, 1, -1, 1, 1];
                norm = 1/(5^4*sqrt(5));
    case 22 
                primes = [4*3*5*11*19*31*37, 7*13*23*31*37, 7*13*23*31*37, 2*7*17*23*29*37, 2*7*17*23*29*37, 103^2*23*29, 103^2*23*29, 13*19*23*29*41, 13*19*23*29*41];
                sign = [1, 1, -1, -1 -1, 1, -1, 1, 1];
                norm = 1/(5^5*sqrt(6));
    case 24
                primes = [49*5*13*23*29, 4*59^2*2*3*11, 4*59^2*2*3*11, 19^2*2*19*31, 19^2*2*19*31, 4*9*11*31*37, 4*9*11*31*37, 31*37*41*43, 31*37*41*43];
                sign = [1, -1, 1, 1, 1, -1 ,1 ,1 , 1];
                norm = 1/5^5;
    case 26
                primes = [4*9*3*13*29*31*41, 23^2*5*7*11*23*41, 23^2*5*7*11*23*41, 2^6*2*5*7*19*23*41, 2^6*2*5*7*19*23*41, 139^2*3*5*23*37, 139^2*3*5*23*37, 89^2*5*37*43, 89^2*5*37*43, 49*2*17*37*43*47, 49*2*17*37*43*47];
                sign = [1, 1,-1, 1, 1, -1 ,1 , -1, -1, -1 ,1];
                norm =1/(5^6*sqrt(6));
    case 28
                primes = [2^8*9*7*31*37*43, 5*11*13*29*37*43, 5*11*13*29*37*43, 2*3*5*13*17*23*29*43, 2*3*5*13*17*23*29*43, 29^2*2*5*23*29*41, 29^2*2*5*23*29*41, 2^4*9*2*5*13*29*41*47, 2^4*9*2*5*13*29*41*47, 7*17*29*41*47*53, 7*17*29*41*47*53];
                sign = [1, 1, -1 , -1, -1, 1, -1, -1 ,-1 ,-1, 1];
                norm = 1/(2*5^6*sqrt(3));
    case 30
                primes = [9*12251^2*11*13*23*29, 4*25*4639^2*3*17*23*31, 4*25*4639^2*3*17*23*31, 2^6*17^2*5*7*11*13*17*19*31*37, 2^6*17^2*5*7*11*13*17*19*31*37, 241^2*3*5*13*31*37*41*43, 241^2*3*5*13*31*37*41*43, 4*25*2*7*11*23*31*37*41*43*47, 4*25*2*7*11*23*31*37*41*43*47, 2*3*13*17*23*31*37*41*43*47*53, 2*3*13*17*23*31*37*41*43*47*53];
                sign = [1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1];
                norm = 1/(5^5*sqrt(71*233*4793));
    case 31
                primes = [2^6*17*19*31*37*41*43*47*53*59, 4*9*3*11*13*19*29*37*41*43*47*53*59, 4*9*3*11*13*19*29*37*41*43*47*53*59, 3^4*41^2*5*7*23*29*41*43*47*53*59, 3^4*41^2*5*7*23*29*41*43*47*53*59, 2^8*31^2*3*5*11*17*19*23*29*47*53*59, 2^8*31^2*3*5*11*17*19*23*29*47*53*59, 9*2161^2*2*7*13*17*19*29*53*59, 9*2161^2*2*7*13*17*19*29*53*59, 4*101^2*151^2*3*11*19*29*59, 4*101^2*151^2*3*11*19*29*59, 71^2*233^2*4793^2*7*11, 71^2*233^2*4793^2*7*11];
                sign = [1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1];
                norm = 1/(2*5^7*sqrt(3*71*233*4793));              
end

coef = sqrt(primes);
coef = coef.*sign;

%determines how many spherical harmonics to build
numToBuild = length(sign);

%builds the appropriate number of spherical harmonics using the proper
%angular momentum and m values, applies the appropriate coefficient, then
%sums them.
[m, n] = size(th);
SAF = zeros(m, n);
Y = zeros(m, n, numToBuild);
for ii = 1:numToBuild
    Y(:,:,ii) = ejovo.saf.harmonicY(L(L==degree), M(ii), th, phi, 'type', 'real');
    Y(:,:,ii) = Y(:,:,ii)*coef(ii);
    SAF = SAF + Y(:,:,ii);  
    
    %hold off
    %r=abs(SAF);
    %[x,y,z] = sph2cart(phi,pi/2-th,r);
    %surf(x,y,z,r);    
    %axis equal
end

SAF = SAF*norm;
end